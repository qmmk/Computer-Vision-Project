Index: utils.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from wand.image import Image\r\nimport numpy as np\r\nimport cv2\r\nimport csv\r\nimport lensfunpy\r\n\r\nlista_cvs = './dataset/data.csv'\r\n\r\n\r\ndef carica_lista_cvs():\r\n    lista_titoli = []\r\n    lista_immagini = []\r\n    lista_stanze = []\r\n    with open(lista_cvs) as csv_file:\r\n        csv_reader = csv.reader(csv_file, delimiter=',')\r\n        line_count = 0\r\n        for row in csv_reader:\r\n            lista_immagini.append(row[3])\r\n            lista_titoli.append(row[0])\r\n            lista_stanze.append(row[2])\r\n\r\n    return lista_titoli, lista_immagini, lista_stanze\r\n\r\n\r\ndef compute_histogram(img):\r\n    planes = []\r\n    if len(img.shape) == 3:\r\n        h, w, d = img.shape\r\n        h_w = h * w\r\n        if d == 3:\r\n            p1 = img[:, :, 0]\r\n            p2 = img[:, :, 1]\r\n            p3 = img[:, :, 2]\r\n            planes = [p1, p2, p3]\r\n        else:\r\n            planes = [img]\r\n\r\n    if len(img.shape) == 2:\r\n        h_w, d = img.shape\r\n        if d == 3:\r\n            p1 = img[:, 0]\r\n            p2 = img[:, 1]\r\n            p3 = img[:, 2]\r\n            planes = [p1, p2, p3]\r\n        else:\r\n            planes = [img]\r\n\r\n    histogram = np.zeros(256 * d)\r\n    for i in np.arange(len(planes)):\r\n        p = planes[i]\r\n        for val in np.unique(p):\r\n            count = np.sum(p == val)\r\n            histogram[val + i * 256] = count\r\n    histogram = histogram / img.size\r\n    return histogram\r\n\r\n\r\ndef hist_compute_orb(image):\r\n    hist = cv2.calcHist([image], [0, 1, 2], None, [8, 8, 8],\r\n                        [0, 256, 0, 256, 0, 256])\r\n    hist = cv2.normalize(hist, hist).flatten()\r\n    return hist\r\n\r\n\r\ndef entropy(histogram):\r\n    histogram = histogram[histogram > 0]\r\n    return -np.sum(histogram * np.log2(histogram))\r\n\r\n\r\ndef drawLabel(w, h, x, y, text, frame):\r\n    cv2.rectangle(frame, (x, y), (x + w, y + h), (120, 0, 0), 2)\r\n    cv2.putText(frame, text, (x + 20, y + 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)\r\n\r\n\r\ndef showImageAndStop(name, im):\r\n    cv2.imshow(name, im)\r\n    cv2.waitKey()\r\n    cv2.destroyAllWindows()\r\n\r\n\r\ndef contourIntersect(contours, frame):\r\n    blank = np.zeros(frame.shape[0:2])\r\n    conts = []\r\n    intersection = []\r\n    for i in range(len(contours)):\r\n        for j in range(len(contours)):\r\n            if i != j:\r\n                checkcontours = [contours[i], contours[j]]\r\n                # Copy each contour into its own image and fill it with '1'\r\n                image1 = cv2.drawContours(blank.copy(), checkcontours, 0, 1)\r\n                image2 = cv2.drawContours(blank.copy(), checkcontours, 1, 1)\r\n\r\n                mat = cv2.bitwise_and(image1, image2)\r\n                intersection.append(mat)\r\n\r\n        for k in intersection:\r\n            if k.any():\r\n                intersection = []\r\n\r\n        if len(intersection) != 0:\r\n            conts.append(i)\r\n\r\n    return conts\r\n\r\n\r\ndef checkInside(rects, index):\r\n    new_index = []\r\n    for i in index:\r\n        for j in index:\r\n            if i != j:\r\n                x1, y1, w, h = rects[i]\r\n                x2, y2 = x1 + w, y1 + h\r\n                X, Y, W, H = rects[j]\r\n                if (x1 < X and X < x2) and (x1 < (X + W) and (X + W) < x2):\r\n                    if (y1 < Y and Y < y2) and (y1 < (Y + H) and (Y + H) < y2):\r\n                        new_index.append(j)\r\n\r\n    return new_index\r\n\r\n\r\ndef reduceListOuts(outs, rects, listindexfree):\r\n    out_ = []\r\n    rect_ = []\r\n    for i in range(len(outs)):\r\n        if i in listindexfree:\r\n            out_.append(outs[i])\r\n            rect_.append(rects[i])\r\n\r\n    return out_, rect_\r\n\r\n\r\ndef shrinkenCountoursList(hulls, frame, rects):\r\n    listindexfree = contourIntersect(hulls, frame)\r\n    listindexinside = checkInside(rects, listindexfree)\r\n    listindexfree = set(listindexfree) - set(listindexinside)\r\n    return listindexfree\r\n\r\n\r\ncam_maker = 'GOPRO'\r\ncam_model = 'HERO4 Silver'\r\nlens_maker = 'GOPRO'\r\nlens_model = 'fixed lens'\r\n\r\ndb = lensfunpy.Database()\r\nprint(db.find_cameras(cam_maker, cam_model)[0])\r\ncam = db.find_cameras(cam_maker, cam_model)[0]\r\nlens = db.find_lenses(cam, lens_maker, lens_model)[0]\r\n\r\nfocal_length = 28.0\r\naperture = 1.4\r\ndistance = 10\r\ndef correct_distortion(frame, h, w):\r\n    # Definisci matrice telecamera K\r\n    '''\r\n    K = np.array([[[673.9683892, 0., 343.68638231],\r\n                   [0., 676.08466459, 245.31865398],\r\n                   [0., 0., 1.]]])\r\n\r\n    # Definisce i coefficienti di distorsione d\r\n    #d = np.array([5.44787247e-02, 1.23043244e-01, - 4.52559581e-04, 5.47011732e-03, - 6.83110234e-01])\r\n    d = np.array([0.3, 0.001, 0.0, 0.0, 0.01])\r\n\r\n    # Leggi un'immagine di esempio e acquisisci le sue dimensioni\r\n    # img = cv2.imread(\"calibrazione_campioni / 2016-07-13-124020.jpg\")\r\n    # h, w = img.shape[: 2]\r\n\r\n    # Genera nuova matrice telecamera dai parametri\r\n    # newcameramatrix, roi = cv2.getOptimalNewCameraMatrix(K, d, (w, h), 0)\r\n\r\n    # Genera tabelle di ricerca per rimappare l' immagine della telecamera\r\n\r\n    # mapx, mapy = cv2.initUndistortRectifyMap(K, d, None, newcameramatrix, (w, h), 5)\r\n\r\n    # Rimappa l'immagine originale in una nuova immagine\r\n    # newimg = cv2.remap(frame, mapx, mapy, cv2.INTER_LINEAR)\r\n\r\n    with Image(frame) as img:\r\n        #print(img.size)\r\n        img.virtual_pixel = 'transparent'\r\n        img.distort('barrel', -(0.2, 0.0, 0.0, 1.0))\r\n        # img.save(filename='checks_barrel.png')\r\n        # convert to opencv/numpy array format\r\n        img_opencv = np.array(img)\r\n    '''\r\n\r\n\r\n    #image_path = '/path/to/image.tiff'\r\n    #undistorted_image_path = '/path/to/image_undist.tiff'\r\n\r\n    #im = cv2.imread(image_path)\r\n    #height, width = im.shape[0], im.shape[1]\r\n\r\n    mod = lensfunpy.Modifier(lens, cam.crop_factor, w, h)\r\n    mod.initialize(focal_length, aperture, distance)\r\n\r\n    undist_coords = mod.apply_geometry_distortion()\r\n    im_undistorted = cv2.remap(frame, undist_coords, None, cv2.INTER_LANCZOS4)\r\n    return im_undistorted\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- utils.py	(revision 03ff091a3685eeba1941575060ac0384f3057fed)
+++ utils.py	(date 1590438135249)
@@ -151,6 +151,8 @@
 distance = 10
 def correct_distortion(frame, h, w):
     # Definisci matrice telecamera K
+    print(cam)
+    print(lens)
     '''
     K = np.array([[[673.9683892, 0., 343.68638231],
                    [0., 676.08466459, 245.31865398],
Index: .idea/Computer-Vision-Project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.7\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"pytest\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/Computer-Vision-Project.iml	(revision 03ff091a3685eeba1941575060ac0384f3057fed)
+++ .idea/Computer-Vision-Project.iml	(date 1590439405295)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.7" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.7 (venv)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
   <component name="TestRunnerService">
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"JavaScriptSettings\">\r\n    <option name=\"languageLevel\" value=\"ES6\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 03ff091a3685eeba1941575060ac0384f3057fed)
+++ .idea/misc.xml	(date 1590439405317)
@@ -3,5 +3,5 @@
   <component name="JavaScriptSettings">
     <option name="languageLevel" value="ES6" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (venv)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_22_05_2020_08_37__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_22_05_2020_08_37__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_05_2020_17_31__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_05_2020_17_31__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_10_05_2020_14_23__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_10_05_2020_14_23__Default_Changelist_.xml
